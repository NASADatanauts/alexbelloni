{"version":3,"sources":["Datanauts.js","data/CountriesDataChart.js","data/CitiesDataChart.js","App.js","serviceWorker.js","index.js"],"names":["Datanauts","datanauts","require","process","_members","_countries","_cities","_industries","_classes","_genders","countMember","arr","name","idCountry","idCity","named","index","i","length","push","id","members","updateMembers","attribs","indexc","countries","cities","_replaceAll","target","search","replacement","replace","RegExp","_getArrByCountry","ret","forEach","filter","c","concat","map","Object","objectSpread","m","country","city","industry","split","toLowerCase","trim","indexOf","countMemberWithInIndustry","class","year","gender","getCities","getCountries","getMembersByCountry","getMembersByCity","getMembers","getIndustries","getIndustriesByCountry","getCityCount","getMemberCount","getClasses","slice","getClassesByCountry","getGenders","getGendersByCountry","CountriesDataChart","getChartData","maxNumber","condensed","extra","labels","a","datasets","label","data","backgroundColor","borderColor","borderWidth","_getData","CitiesDataChart","App","state","dataChart","chartMode","chartFooter","currentCountryName","maxElements","onClickButtonMembers","mode","_this","setCityData","d","details","react_default","createElement","Button","onClick","setState","industries","genders","classes","this","setCountryData","sort","b","newIndustries","reduce","accumulator","currentValue","createDetailArea","createDefaultArea","countryCount","cityCount","memberCount","createIndustryArea","clickMembers","_this2","columns","Col","sm","md","lg","className","type","aria-describedby","disabled","value","footer","style","textAlign","Row","href","e","preventDefault","xs","totalHidden","Container","es","width","height","options","maintainAspectRatio","scales","xAxes","barPercentage","minBarLength","gridLines","offsetGridLines","yAxes","ticks","beginAtZero","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb3d07a2.chunk.js","sourcesContent":["const Datanauts = () => {\r\n    const datanauts = require(process.env.REACT_APP_JSON_FILENAME || './datanauts.json')\r\nlet year=0\r\n    const _members = [], _countries = [], _cities = [], _industries = [], _classes = [], _genders = []\r\n    let img=''\r\n    datanauts.forEach((m, i) => {\r\n        if (m) {\r\n            const idCountry = countMember(_countries, m.country)\r\n            const idCity = countMember(_cities, m.city, idCountry)\r\n            \r\n            _members.push({ ...m, idCountry, idCity })\r\n            if (m.industry) {\r\n                const industries = _replaceAll(_replaceAll(m.industry, '/', ','), ' and ', ',').split(',')\r\n                industries.map(i => {\r\n                    const industry = i.toLowerCase().trim()\r\n                    if ([\r\n                        \"stay at home mom\", \"environment (need spring 2018 cohort button)\", \"actively looking for ds positions\"\r\n                    ].indexOf(industry) === -1) {\r\n                        countMemberWithInIndustry(_industries, industry, idCountry, idCity)\r\n                    }\r\n                })\r\n            }\r\n            if (m.class) {\r\n                updateMembers(_classes, m.class+m.year, { name: m.class, year: m.year }, idCountry, idCity)\r\n                \r\n            }\r\n            if (m.gender) {\r\n                updateMembers(_genders, m.gender, { name: m.gender === 'F' ? 'Female' : 'Male' }, idCountry, idCity)\r\n            }\r\n        }\r\n    })\r\n    \r\n    function countMember(arr, name, idCountry, idCity) {\r\n        const named = name || ('unknowed'+(idCountry ? '-'+idCountry : ''))\r\n        let index = -1\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            if (arr[i].name === named) {\r\n                index = i\r\n                break\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            arr.push({ id: arr.length, name: named, members: 1, idCountry })\r\n            return arr.length - 1\r\n        } else {\r\n            arr[index].members++\r\n            return index\r\n        }\r\n    }\r\n\r\n    function countMemberWithInIndustry(arr, name, idCountry, idCity) {\r\n        const named = name || 'unknowed'\r\n        let index = -1\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            if (arr[i].name === named) {\r\n                index = i\r\n                break\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            arr.push({ id: arr.length, name: named, members: 1, countries: [{ id: idCountry, industry: named, members: 1 }] })\r\n            return arr.length - 1\r\n        } else {\r\n            arr[index].members++\r\n            let indexc = -1\r\n            for (let i = 0; i < arr[index].countries.length; ++i) {\r\n                if (arr[index].countries[i].id === idCountry) {\r\n                    indexc = i\r\n                    break\r\n                }\r\n            }\r\n            if (indexc === -1) {\r\n                arr[index].countries.push({ id: idCountry, industry: named, members: 1 })\r\n            } else {\r\n                arr[index].countries[indexc].members++\r\n            }\r\n\r\n            return index\r\n        }\r\n    }\r\n\r\n    //[{id,members,<attribs>,countries,cities},...]\r\n    function updateMembers(arr, id, attribs, idCountry, idCity) {\r\n        let index = -1\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            if (arr[i].id === id) {\r\n                index = i\r\n                break\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            arr.push({\r\n                id, members: 1, attribs,\r\n                countries: [{ id: idCountry, members: 1 }],\r\n                cities: [{ id: idCity, members: 1 }]\r\n            })\r\n            return\r\n        } else {\r\n            arr[index].members++\r\n            let indexc = -1\r\n            for (let i = 0; i < arr[index].countries.length; ++i) {\r\n                if (arr[index].countries[i].id === idCountry) {\r\n                    indexc = i\r\n                    break\r\n                }\r\n            }\r\n            if (indexc === -1) {\r\n                arr[index].countries.push({ id: idCountry, members: 1 })\r\n            } else {\r\n                arr[index].countries[indexc].members++\r\n            }\r\n\r\n            indexc = -1\r\n            for (let i = 0; i < arr[index].cities.length; ++i) {\r\n                if (arr[index].cities[i].id === idCity) {\r\n                    indexc = i\r\n                    break\r\n                }\r\n            }\r\n            if (indexc === -1) {\r\n                arr[index].cities.push({ id: idCity, members: 1 })\r\n            } else {\r\n                arr[index].cities[indexc].members++\r\n            }\r\n\r\n            return\r\n        }\r\n    }\r\n\r\n    function _replaceAll(target, search, replacement) {\r\n        return target.replace(new RegExp(search, 'g'), replacement);\r\n    }\r\n\r\n    function getCities(idCountry) {\r\n        return _cities.filter(c => c.idCountry === idCountry)\r\n    }\r\n\r\n    function getCityCount() {\r\n        return _cities.length\r\n    }\r\n\r\n    function getCountries() {\r\n        return _countries\r\n    }\r\n\r\n    function getMembersByCountry(id) {\r\n        return { country: _countries.filter(c => c.id === id)[0], members: _members.filter(c => c.idCountry === id) }\r\n    }\r\n\r\n    function getMembersByCity(id) {\r\n        return { city: _cities.filter(c => c.id === id)[0], members: _members.filter(c => c.idCity === id) }\r\n    }\r\n\r\n    function getMembers() {\r\n        return _members\r\n    }\r\n\r\n    function getMemberCount() {\r\n        return _members.length\r\n    }\r\n\r\n    function getIndustries() {\r\n        return _industries\r\n    }\r\n\r\n    function _getArrByCountry(arr, id) {\r\n        let ret = []\r\n        arr.forEach(i => {\r\n            const countries = i.countries.filter(c => c.id === id)\r\n            if (countries.length > 0) {\r\n                ret = ret.concat(countries.map(c => {\r\n                    return {\r\n                        ...i,\r\n                        members: c.members\r\n                    }\r\n                }))\r\n            }\r\n        })\r\n        return ret\r\n    }\r\n\r\n    function getIndustriesByCountry(id) {\r\n        let ret = []\r\n        _industries.forEach(i => {\r\n            const countries = i.countries.filter(c => c.id === id)\r\n            if (countries.length > 0) {\r\n                ret = ret.concat(countries.map(c => {\r\n                    return {\r\n                        name: c.industry,\r\n                        members: c.members\r\n                    }\r\n                }))\r\n            }\r\n        })\r\n        return ret\r\n    }\r\n\r\n    function getClasses() {\r\n        return _classes.slice()\r\n    }\r\n\r\n    function getClassesByCountry(id) {\r\n        return _getArrByCountry(_classes, id)\r\n    }\r\n\r\n    function getGenders() {\r\n        return _genders.slice()\r\n    }\r\n\r\n    function getGendersByCountry(id) {\r\n        return _getArrByCountry(_genders, id)\r\n    }\r\n\r\n    return {\r\n        getCities,\r\n        getCountries,\r\n        getMembersByCountry,\r\n        getMembersByCity,\r\n        getMembers,\r\n        getIndustries,\r\n        getIndustriesByCountry,\r\n        getCityCount,\r\n        getMemberCount,\r\n        getClasses,\r\n        getClassesByCountry,\r\n        getGenders,\r\n        getGendersByCountry\r\n    }\r\n}\r\n\r\n//module.exports = Datanauts()\r\nexport default Datanauts()","const CountriesDataChart = () => {\r\n    function _getData(countries, extra){\r\n        const c = extra ? countries.concat(extra) : countries\r\n        return {\r\n            labels: c.map(a=>a.name),\r\n            datasets: [{\r\n                label: 'Members by Country',\r\n                data: c.map(a=>a.members),\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(75, 192, 192, 0.2)',\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 159, 64, 0.2)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    //return: data={label:[], datasets:[]}\r\n    function _getChartData(countries, maxNumber) {\r\n        const condensed = countries.slice(0, maxNumber - 1)\r\n\r\n        let members = 0\r\n        for (let i = maxNumber - 1; i < countries.length; ++i) {\r\n            members += countries[i].members\r\n        }\r\n        return _getData(condensed,countries.length <= maxNumber ? null : [{ name: 'Others', members }])\r\n    }\r\n\r\n    return {\r\n        getChartData: _getChartData\r\n    }\r\n}\r\n\r\nexport default CountriesDataChart()\r\n","const CitiesDataChart = () => {\r\n    function _getData(cities, extra){\r\n        const c = extra ? cities.concat(extra) : cities\r\n        return {\r\n            labels: c.map(a=>a.name),\r\n            datasets: [{\r\n                label: 'Members by City',\r\n                data: c.map(a=>a.members), \r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(75, 192, 192, 0.2)',\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 159, 64, 0.2)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    //return: data={label:[], datasets:[]}\r\n    function _getChartData(cities, maxNumber) {\r\n        const condensed = cities.slice(0, maxNumber - 1)\r\n\r\n        let members = 0\r\n        for (let i = maxNumber - 1; i < cities.length; ++i) {\r\n            members += cities[i].members\r\n        }\r\n        return _getData(condensed,cities.length <= maxNumber ? null : [{ name: 'Others', members }])\r\n    }\r\n\r\n    return {\r\n        getChartData: _getChartData\r\n    }\r\n}\r\n\r\nexport default CitiesDataChart()\r\n","\nimport React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Container, Select, Row, Col } from 'react-bootstrap';\n// Import as a module in your JS\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { Typeahead } from 'react-bootstrap-typeahead'; // ES2015\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Datanauts from './Datanauts'\nimport CountriesDataChart from './data/CountriesDataChart'\nimport CitiesDataChart from './data/CitiesDataChart'\n\nclass App extends Component {\n    state = { dataChart: null, chartMode: null, chartFooter: null, currentCountryName: null }\n\n    componentDidMount() {\n        this.setCountryData()\n    }\n\n    maxElements = 6\n\n    setCountryData() {\n        const countries = Datanauts.getCountries()\n        countries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : (a.members === b.members ?\n                (a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1)\n                :\n                b.members - a.members)\n        })\n\n        let industries = Datanauts.getIndustries()\n        industries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : (a.members === b.members ?\n                (a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1)\n                :\n                b.members - a.members)\n        })\n        let newIndustries = industries.slice()\n        if (industries.length > 9) {\n            newIndustries = newIndustries.slice(0, 9)\n            newIndustries.push({\n                name: 'others', members: industries.slice(9).reduce((accumulator, currentValue) => {\n                    return accumulator + currentValue.members\n                }, 0)\n            })\n        }\n\n        const genders = Datanauts.getGenders().map(c => { return { ...c, name: c.attribs.name } })\n\n        const classes = Datanauts.getClasses().map(c => { return { ...c, name: `${c.attribs.name} ${c.attribs.year}` } })\n        classes.sort((a, b) => {\n            return a.year - b.year\n        })\n\n        this.setState({\n            dataChart: CountriesDataChart.getChartData(countries, this.maxElements),\n            chartMode: 'country',\n            details: this.createDetailArea(countries, this.onClickButtonMembers, 'country'),\n            chartFooter: 'Datanauts worldwide',\n            industries: this.createDefaultArea(newIndustries, 'Industries', true),\n            countryCount: countries.length,\n            cityCount: Datanauts.getCityCount(),\n            memberCount: Datanauts.getMemberCount(),\n            genders: this.createDefaultArea(genders, 'Genders'),\n            classes: this.createDefaultArea(classes, 'Classes')\n        })\n    }\n\n    setCityData(idCountry) {\n        const cities = Datanauts.getCities(idCountry)\n        cities.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : (a.members === b.members ?\n                (a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1)\n                :\n                b.members - a.members)\n        })\n\n        const industries = Datanauts.getIndustriesByCountry(idCountry)\n        industries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n\n        const genders = Datanauts.getGendersByCountry(idCountry)\n\n        const classes = Datanauts.getClassesByCountry(idCountry).map(c => { return { ...c, name: `${c.attribs.name} ${c.attribs.year}` } })\n        classes.sort((a, b) => {\n            return a.year - b.year\n        })\n\n        this.setState({\n            dataChart: CitiesDataChart.getChartData(cities, this.maxElements),\n            chartMode: 'city',\n            details: this.createDetailArea(cities, this.onClickButtonMembers, 'city'),\n            chartFooter: 'Datanauts in ' + Datanauts.getCountries().filter(c => c.id === idCountry)[0].name,\n            industries: this.createIndustryArea(industries),\n            genders: this.createDefaultArea(genders, 'Genders'),\n            classes: this.createDefaultArea(classes, 'Classes')            \n        })\n    }\n\n    createDetailArea(arr, clickMembers, mode) {\n        let memberCount = 0;\n        const columns = arr.map(c => {\n            memberCount += c.members\n            return (\n                <Col sm={6} md={6} lg={4}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control\" aria-describedby=\"basic-addon2\"\n                            disabled={true}\n                            value={c.name}\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => { clickMembers(mode, c.id) }}>\n                                {c.members}\n                            </button>\n                        </div>\n                    </div>\n                </Col>\n            )\n        })\n        const footer = (\n            <div style={{ textAlign: 'center' }}><p><span className='small'>Total: {memberCount}</span></p></div>\n        )\n        return (\n            <div>\n                <h4 style={{ textAlign: 'center' }}>{mode === 'country' ? 'Countries' : 'Cities'}</h4>\n\n                <Row>\n                    {columns}\n                </Row>\n                {footer}\n                {mode === 'city' && <div style={{ textAlign: 'left' }}>\n                    <a href=\"#\" onClick={(e) => { e.preventDefault(); this.setCountryData() }}>back to countries</a>\n                </div>}\n            </div>\n        )\n    }\n\n    createIndustryArea(arr) {\n        const condensed = arr.slice(0, 9)\n        if (arr.length > 9) {\n            condensed.push({\n                name: 'others', members: arr.slice(9).reduce((accumulator, currentValue) => {\n                    return accumulator + currentValue.members\n                }, 0)\n            })\n        }\n\n        const columns = condensed.map(c => {\n            return (\n                <Col xs={12}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control warning\" aria-describedby=\"basic-addon2\" style={{ backgroundColor: 'rgba(255, 206, 86, 0.2)' }}\n                            disabled={true}\n                            value={c.name}\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-secondary\" type=\"button\">\n                                {c.members}\n                            </button>\n                        </div>\n                    </div>\n                </Col>\n            )\n        })\n        return (\n            <div>\n                <h4 style={{ textAlign: 'center' }}>Industries</h4>\n                <Row>\n                    {columns}\n                </Row>\n            </div>\n        )\n    }\n\n    createDefaultArea(arr, name, totalHidden) {\n        const columns = arr.map(c => {\n            return (\n                <Col xs={12}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control warning\" aria-describedby=\"basic-addon2\" style={{ backgroundColor: 'rgba(255, 206, 86, 0.2)' }}\n                            disabled={true}\n                            value={c.name}\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-secondary\" type=\"button\">\n                                {c.members}\n                            </button>\n                        </div>\n                    </div>\n                </Col>\n            )\n        })\n        return (\n            <div>\n                <h4 style={{ textAlign: 'center' }}>{name}</h4>\n                <Row>\n                    {columns}\n                </Row>\n                {!totalHidden &&\n                    <Row>\n                        <Col xs={12}>\n                            <input type=\"text\" className=\"form-control warning\" aria-describedby=\"basic-addon2\" style={{ backgroundColor: 'rgba(54, 162, 235, 0.2)', textAlign: 'right' }}\n                                disabled={true}\n                                value={arr.reduce((accumulator, currentValue) => { return accumulator + currentValue.members }, 0)}\n                            />\n                        </Col>\n                    </Row>\n                }\n\n            </div>\n        )\n    }\n\n    onClickButtonMembers = (mode, id) => {\n        if (mode === 'country') {\n            this.setCityData(id)\n        } else {\n            const d = Datanauts.getMembersByCity(id)\n            const details = (\n                <div>\n                    <h2>{d.city.name}</h2>\n                    <h4>members: {d.city.members}</h4>\n                    {d.members.map(m=><p>{m.name.split(' ')[0]}</p>)}\n                    <Button onClick={() => { this.setCityData(d.city.idCountry) }}>Back</Button>\n                </div>\n            )\n            this.setState({\n                details,\n                industries: null,\n                genders: null,\n                classes: null\n            })\n        }\n    }\n\n    // handleClick(e, k) {\n    //     if (this.state.chartMode === 'country') {\n    //         if (!k[0]) return\n    //         const idElement = parseInt(k[0]._index)\n    //         const country = this.chartCountries[idElement]\n    //         if (country)\n    //             this.setCityData(country.id)\n    //     } else {\n    //         this.setCountryData()\n    //     }\n    // }\n\n    render() {\n        return (\n            <Container>\n                <header>\n                    <h1>Searchnauts</h1>\n                    <h4>Where are NASA Datanauts from?</h4>\n                    <p>{this.state.memberCount} members in {this.state.cityCount} cities and {this.state.countryCount} countries</p>\n                </header>\n                {this.state.dataChart &&\n                    <div>\n                        <div>\n                            <Bar\n                                data={this.state.dataChart}\n                                width={100}\n                                height={400}\n                                options={{\n                                    maintainAspectRatio: false,\n                                    // events: ['click'],\n                                    // onClick: (e, k) => { this.handleClick(e, k) },\n                                    scales: {\n                                        xAxes: [{\n                                            barPercentage: 0.5,\n                                            minBarLength: 2,\n                                            gridLines: {\n                                                offsetGridLines: true\n                                            }\n                                        }],\n                                        yAxes: [{\n                                            ticks: {\n                                                beginAtZero: true\n                                            }\n                                        }]\n                                    }\n                                }}\n\n                            />\n                        </div>\n                        <div style={{ textAlign: 'center' }}><p><span className='small'>{this.state.chartFooter}</span></p></div>\n                        <Row>\n                            <Col md={8}>\n                                {this.state.details}\n                            </Col>\n                            <Col md={4}>\n                                {this.state.industries}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {this.state.genders}\n                            </Col>\n                            <Col>\n                                {this.state.classes}\n                            </Col>\n                        </Row>\n                    </div>}\n                <footer style={{ textAlign: 'center', margin:'2 0px' }}>\n                    my stuff as: <a href=\"https://nasadatanauts.github.io/alexbelloni/\" target=\"_blank\">datanaut</a> | <a href=\"https://alexandrebelloni.com\" target=\"_blank\">developer</a>\n                </footer>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}