{"version":3,"sources":["Datanauts.js","data/CountriesDataChart.js","data/CitiesDataChart.js","App.js","serviceWorker.js","index.js"],"names":["Datanauts","countMember","arr","name","idOwner","named","index","i","length","push","id","members","_members","_countries","_cities","datanauts","forEach","m","idCountry","country","idCity","city","Object","objectSpread","getCities","filter","c","getCountries","getMembersByCountry","getMembersByCity","CountriesDataChart","getChartData","countries","maxNumber","condensed","slice","extra","concat","labels","map","a","datasets","label","data","backgroundColor","borderColor","borderWidth","_getData","CitiesDataChart","cities","App","state","dataChart","chartMode","maxElements","chartCountries","chartCities","onClickButtonMembers","mode","d","details","react_default","createElement","Button","onClick","_this","setCountryData","setState","setCityData","this","sort","b","createDetailArea","clickMembers","Row","Col","md","className","type","aria-describedby","disabled","value","e","k","idElement","parseInt","_index","_this2","Container","es","width","height","options","maintainAspectRatio","events","handleClick","scales","xAxes","barPercentage","minBarLength","gridLines","offsetGridLines","yAxes","ticks","beginAtZero","style","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13663c75.chunk.js","sourcesContent":["import datanauts from './datanauts.json'\r\n\r\nconst Datanauts = () => {\r\n    function countMember(arr, name, idOwner){\r\n        const named = name || 'unknowed'\r\n        let index = -1\r\n        for(let i=0; i<arr.length;++i){\r\n            if(arr[i].name === named){\r\n                index = i\r\n                break\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            arr.push({ id: arr.length, name: named, members: 1, idOwner })\r\n            return arr.length-1\r\n        } else {\r\n            arr[index].members++\r\n            return index\r\n        }\r\n    }\r\n\r\n    const _members = [], _countries = [], _cities = []\r\n    datanauts.forEach((m,i) => {\r\n        if(m){\r\n            const idCountry = countMember(_countries, m.country)\r\n            const idCity = countMember(_cities, m.city, idCountry)\r\n            _members.push({...m, idCountry, idCity})\r\n        }    \r\n    })\r\n\r\n    function getCities(idCountry){\r\n        return _cities.filter(c=>c.idOwner === idCountry)\r\n    }\r\n\r\n    function getCountries(){\r\n        return _countries\r\n    }\r\n\r\n    function getMembersByCountry(id){\r\n        return {country: _countries.filter(c=>c.id === id)[0], members:_members.filter(c=>c.idCountry === id)}\r\n    }\r\n\r\n    function getMembersByCity(id){\r\n        return {city: _cities.filter(c=>c.id === id)[0], members:_members.filter(c=>c.idCity === id)}\r\n    }\r\n\r\n    return {\r\n        getCities,\r\n        getCountries,\r\n        getMembersByCountry,\r\n        getMembersByCity\r\n    }\r\n}\r\n\r\nexport default Datanauts()","const CountriesDataChart = () => {\r\n    function _getData(countries, extra){\r\n        const c = countries.concat(extra)\r\n        return {\r\n            labels: c.map(a=>a.name),\r\n            datasets: [{\r\n                label: 'Members by Country',\r\n                data: c.map(a=>a.members),\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(75, 192, 192, 0.2)',\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 159, 64, 0.2)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    //return: data={label:[], datasets:[]}\r\n    function _getChartData(countries, maxNumber) {\r\n        const condensed = countries.slice(0, maxNumber - 1)\r\n\r\n        let members = 0\r\n        for (let i = maxNumber - 1; i < countries.length; ++i) {\r\n            members += countries[i].members\r\n        }\r\n        return _getData(condensed,countries.length <= maxNumber ? null : [{ name: 'Others', members }])\r\n    }\r\n\r\n    return {\r\n        getChartData: _getChartData\r\n    }\r\n}\r\n\r\nexport default CountriesDataChart()\r\n","const CitiesDataChart = () => {\r\n    function _getData(cities, extra){\r\n        const c = extra ? cities.concat(extra) : cities\r\n        return {\r\n            labels: c.map(a=>a.name),\r\n            datasets: [{\r\n                label: 'Members by City',\r\n                data: c.map(a=>a.members),\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(75, 192, 192, 0.2)',\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 159, 64, 0.2)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    //return: data={label:[], datasets:[]}\r\n    function _getChartData(cities, maxNumber) {\r\n        const condensed = cities.slice(0, maxNumber - 1)\r\n\r\n        let members = 0\r\n        for (let i = maxNumber - 1; i < cities.length; ++i) {\r\n            members += cities[i].members\r\n        }\r\n        return _getData(condensed,cities.length <= maxNumber ? null : [{ name: 'Others', members }])\r\n    }\r\n\r\n    return {\r\n        getChartData: _getChartData\r\n    }\r\n}\r\n\r\nexport default CitiesDataChart()\r\n","\nimport React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Container, Select, Row, Col } from 'react-bootstrap';\n// Import as a module in your JS\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { Typeahead } from 'react-bootstrap-typeahead'; // ES2015\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Datanauts from './Datanauts'\nimport CountriesDataChart from './data/CountriesDataChart'\nimport CitiesDataChart from './data/CitiesDataChart'\n\nclass App extends Component {\n    state = { dataChart: null, chartMode: null }\n\n    componentDidMount() {\n        this.setCountryData()\n    }\n\n    maxElements = 6\n\n    chartCountries = []\n    setCountryData() {\n        const countries = Datanauts.getCountries()\n        countries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n        this.chartCountries = countries.slice(0, this.maxElements - 1)\n\n        this.setState({\n            dataChart: CountriesDataChart.getChartData(countries, this.maxElements),\n            chartMode: 'country',\n            details: this.createDetailArea(countries, this.onClickButtonMembers, 'country')\n        })\n    }\n\n    chartCities = []\n    setCityData(idCountry) {\n        const cities = Datanauts.getCities(idCountry)\n        cities.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n        this.chartCities = cities.slice(0, this.maxElements - 1)\n\n        this.setState({\n            dataChart: CitiesDataChart.getChartData(cities, this.maxElements),\n            chartMode: 'city',\n            details: this.createDetailArea(cities, this.onClickButtonMembers, 'city')\n        })\n    }\n\n    createDetailArea(arr, clickMembers, mode) {\n        return (\n            <Row>\n                {\n                    arr.map(c => {\n                        return (\n                            <Col md={3}>\n                                <div className=\"input-group mb-3\">\n                                    <input type=\"text\" className=\"form-control\" aria-describedby=\"basic-addon2\"\n                                        disabled={true}\n                                        value={c.name}\n                                    />\n                                    <div className=\"input-group-append\">\n                                        <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => clickMembers(mode, c.id)}>{c.members}</button>\n                                    </div>\n                                </div>\n                            </Col>\n                        )\n                    })}\n            </Row>\n        )\n    }\n\n    onClickButtonMembers = (mode, id) => {\n        if (mode === 'country') {\n            const d = Datanauts.getMembersByCountry(id)\n            const details = (\n                <div>\n                    <h2>{d.country.name}</h2>\n                    <h4>members: {d.country.members}</h4>\n                    <p><i>Confidential Information</i></p>\n                    <Button onClick={() => { this.setCountryData() }}>Back</Button>\n                </div>\n            )\n            this.setState({ details })\n        } else {\n            const d = Datanauts.getMembersByCity(id)\n            const details = (\n                <div>\n                    <h2>{d.city.name}</h2>\n                    <h4>members: {d.city.members}</h4>\n                    <p><i>Confidential Information</i></p>\n                    <Button onClick={() => { this.setCityData(d.city.idOwner) }}>Back</Button>\n                </div>\n            )\n            this.setState({ details })\n        }\n    }\n\n    handleClick(e, k) {\n        if (this.state.chartMode === 'country') {\n            if(!k[0]) return\n            const idElement = parseInt(k[0]._index)\n            const country = this.chartCountries[idElement]\n            if (country)\n                this.setCityData(country.id)\n        } else {\n            this.setCountryData()\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <header>\n                    <h1>Searchnauts</h1>\n                </header>\n                {this.state.dataChart &&\n                    <div>\n                        <div>\n                            <Bar\n                                data={this.state.dataChart}\n                                width={100}\n                                height={400}\n                                options={{\n                                    maintainAspectRatio: false,\n                                    events: ['click'],\n                                    onClick: (e, k) => { this.handleClick(e, k) },\n                                    scales: {\n                                        xAxes: [{\n                                            barPercentage: 0.5,\n                                            minBarLength: 2,\n                                            gridLines: {\n                                                offsetGridLines: true\n                                            }\n                                        }],\n                                        yAxes: [{\n                                            ticks: {\n                                                beginAtZero: true\n                                            }\n                                        }]\n                                    }\n                                }}\n\n                            />\n                        </div>\n                        <div>\n                            {this.state.details}\n                        </div>\n                    </div>}\n                <footer style={{textAlign: 'center'}}>\n                </footer>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}