{"version":3,"sources":["Datanauts.js","data/CountriesDataChart.js","data/CitiesDataChart.js","App.js","serviceWorker.js","index.js"],"names":["Datanauts","datanauts","require","process","countMember","arr","name","idCountry","named","index","i","length","push","id","members","_replaceAll","target","search","replacement","replace","RegExp","_members","_countries","_cities","_industries","forEach","m","country","idCity","city","Object","objectSpread","industry","split","map","toLowerCase","trim","indexOf","countries","indexc","countMemberWithInIndustry","getCities","filter","c","getCountries","getMembersByCountry","getMembersByCity","getMembers","getIndustries","getIndustriesByCountry","ret","concat","CountriesDataChart","getChartData","maxNumber","condensed","slice","extra","labels","a","datasets","label","data","backgroundColor","borderColor","borderWidth","_getData","CitiesDataChart","cities","App","state","dataChart","chartMode","chartFooter","currentCountryName","maxElements","chartCountries","chartCities","onClickButtonMembers","mode","d","industries","sort","b","details","react_default","createElement","Button","onClick","_this","setCountryData","setState","createIndustryArea","setCityData","this","createDetailArea","clickMembers","memberCount","columns","Col","sm","md","lg","className","type","aria-describedby","disabled","value","footer","style","textAlign","Row","reduce","accumulator","currentValue","xs","e","k","idElement","parseInt","_index","_this2","Container","es","width","height","options","maintainAspectRatio","events","handleClick","scales","xAxes","barPercentage","minBarLength","gridLines","offsetGridLines","yAxes","ticks","beginAtZero","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67654ee3.chunk.js","sourcesContent":["const Datanauts = () => {\r\n    const datanauts = require(process.env.REACT_APP_JSON_FILENAME)\r\n\r\n    function countMember(arr, name, idCountry) {\r\n        const named = name || 'unknowed'\r\n        let index = -1\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            if (arr[i].name === named) {\r\n                index = i\r\n                break\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            arr.push({ id: arr.length, name: named, members: 1, idCountry })\r\n            return arr.length - 1\r\n        } else {\r\n            arr[index].members++\r\n            return index\r\n        }\r\n    }\r\n\r\n    function countMemberWithInIndustry(arr, name, idCountry, idCity) {\r\n        const named = name || 'unknowed'\r\n        let index = -1\r\n        for (let i = 0; i < arr.length; ++i) {\r\n            if (arr[i].name === named) {\r\n                index = i\r\n                break\r\n            }\r\n        }\r\n        if (index === -1) {\r\n            arr.push({ id: arr.length, name: named, members: 1, countries: [{ id: idCountry, industry:named, members: 1 }] })\r\n            return arr.length - 1\r\n        } else {\r\n            arr[index].members++\r\n            let indexc = -1\r\n            for (let i = 0; i < arr[index].countries.length; ++i) {\r\n                if (arr[index].countries[i].id === idCountry) {\r\n                    indexc = i\r\n                    break\r\n                }\r\n            }\r\n            if(indexc === -1){\r\n                arr[index].countries.push({ id: idCountry, industry:named, members: 1 })\r\n            } else {\r\n                arr[index].countries[indexc].members++\r\n            }\r\n            \r\n            return index\r\n        }\r\n    }\r\n\r\n    function _replaceAll(target, search, replacement) {\r\n        return target.replace(new RegExp(search, 'g'), replacement);\r\n    }\r\n\r\n    const _members = [], _countries = [], _cities = [], _industries = []\r\n    datanauts.forEach((m, i) => {\r\n        if (m) {\r\n            const idCountry = countMember(_countries, m.country)\r\n            const idCity = countMember(_cities, m.city, idCountry)\r\n            _members.push({ ...m, idCountry, idCity })\r\n            if (m.industry) {\r\n                const industries = _replaceAll(_replaceAll(m.industry, '/', ','), ' and ', ',').split(',')\r\n                industries.map(i => {\r\n                    const industry = i.toLowerCase().trim()\r\n                    if ([\r\n                        \"stay at home mom\", \"environment (need spring 2018 cohort button)\", \"actively looking for ds positions\"\r\n                    ].indexOf(industry) === -1) {\r\n                        countMemberWithInIndustry(_industries, industry, idCountry, idCity)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n    function getCities(idCountry) {\r\n        return _cities.filter(c => c.idCountry === idCountry)\r\n    }\r\n\r\n    function getCountries() {\r\n        return _countries\r\n    }\r\n\r\n    function getMembersByCountry(id) {\r\n        return { country: _countries.filter(c => c.id === id)[0], members: _members.filter(c => c.idCountry === id) }\r\n    }\r\n\r\n    function getMembersByCity(id) {\r\n        return { city: _cities.filter(c => c.id === id)[0], members: _members.filter(c => c.idCity === id) }\r\n    }\r\n\r\n    function getMembers() {\r\n        return _members\r\n    }\r\n\r\n    function getIndustries() {\r\n        return _industries\r\n    }\r\n\r\n    function getIndustriesByCountry(id) {\r\n        let ret = []\r\n        _industries.forEach(i=>{\r\n            const countries = i.countries.filter(c=>c.id === id)\r\n            if(countries.length > 0){\r\n                ret = ret.concat(countries.map(c=>{\r\n                    return {\r\n                        name: c.industry,\r\n                        members: c.members\r\n                    }\r\n                }))\r\n            }\r\n        })\r\n        return ret\r\n    }\r\n\r\n    return {\r\n        getCities,\r\n        getCountries,\r\n        getMembersByCountry,\r\n        getMembersByCity,\r\n        getMembers,\r\n        getIndustries,\r\n        getIndustriesByCountry\r\n    }\r\n}\r\n\r\nexport default Datanauts()","const CountriesDataChart = () => {\r\n    function _getData(countries, extra){\r\n        const c = extra ? countries.concat(extra) : countries\r\n        return {\r\n            labels: c.map(a=>a.name),\r\n            datasets: [{\r\n                label: 'Members by Country',\r\n                data: c.map(a=>a.members),\r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(75, 192, 192, 0.2)',\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 159, 64, 0.2)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    //return: data={label:[], datasets:[]}\r\n    function _getChartData(countries, maxNumber) {\r\n        const condensed = countries.slice(0, maxNumber - 1)\r\n\r\n        let members = 0\r\n        for (let i = maxNumber - 1; i < countries.length; ++i) {\r\n            members += countries[i].members\r\n        }\r\n        return _getData(condensed,countries.length <= maxNumber ? null : [{ name: 'Others', members }])\r\n    }\r\n\r\n    return {\r\n        getChartData: _getChartData\r\n    }\r\n}\r\n\r\nexport default CountriesDataChart()\r\n","const CitiesDataChart = () => {\r\n    function _getData(cities, extra){\r\n        const c = extra ? cities.concat(extra) : cities\r\n        return {\r\n            labels: c.map(a=>a.name),\r\n            datasets: [{\r\n                label: 'Members by City',\r\n                data: c.map(a=>a.members), \r\n                backgroundColor: [\r\n                    'rgba(255, 99, 132, 0.2)',\r\n                    'rgba(54, 162, 235, 0.2)',\r\n                    'rgba(255, 206, 86, 0.2)',\r\n                    'rgba(75, 192, 192, 0.2)',\r\n                    'rgba(153, 102, 255, 0.2)',\r\n                    'rgba(255, 159, 64, 0.2)'\r\n                ],\r\n                borderColor: [\r\n                    'rgba(255, 99, 132, 1)',\r\n                    'rgba(54, 162, 235, 1)',\r\n                    'rgba(255, 206, 86, 1)',\r\n                    'rgba(75, 192, 192, 1)',\r\n                    'rgba(153, 102, 255, 1)',\r\n                    'rgba(255, 159, 64, 1)'\r\n                ],\r\n                borderWidth: 1\r\n            }]\r\n        }\r\n    }\r\n\r\n    //return: data={label:[], datasets:[]}\r\n    function _getChartData(cities, maxNumber) {\r\n        const condensed = cities.slice(0, maxNumber - 1)\r\n\r\n        let members = 0\r\n        for (let i = maxNumber - 1; i < cities.length; ++i) {\r\n            members += cities[i].members\r\n        }\r\n        return _getData(condensed,cities.length <= maxNumber ? null : [{ name: 'Others', members }])\r\n    }\r\n\r\n    return {\r\n        getChartData: _getChartData\r\n    }\r\n}\r\n\r\nexport default CitiesDataChart()\r\n","\nimport React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Container, Select, Row, Col } from 'react-bootstrap';\n// Import as a module in your JS\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { Typeahead } from 'react-bootstrap-typeahead'; // ES2015\n\nimport { Bar } from 'react-chartjs-2';\n\nimport Datanauts from './Datanauts'\nimport CountriesDataChart from './data/CountriesDataChart'\nimport CitiesDataChart from './data/CitiesDataChart'\n\nclass App extends Component {\n    state = { dataChart: null, chartMode: null, chartFooter: null, currentCountryName: null }\n\n    componentDidMount() {\n        this.setCountryData()\n    }\n\n    maxElements = 6\n\n    chartCountries = []\n    setCountryData() {\n        const countries = Datanauts.getCountries()\n        countries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n        this.chartCountries = countries.slice(0, this.maxElements - 1)\n\n        const industries = Datanauts.getIndustries()\n        industries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n\n        this.setState({\n            dataChart: CountriesDataChart.getChartData(countries, this.maxElements),\n            chartMode: 'country',\n            details: this.createDetailArea(countries, this.onClickButtonMembers, 'country'),\n            chartFooter: 'Datanauts worldwide',\n            industries: this.createIndustryArea(industries)\n        })\n    }\n\n    chartCities = []\n    setCityData(idCountry) {\n        const cities = Datanauts.getCities(idCountry)\n        cities.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n        this.chartCities = cities.slice(0, this.maxElements - 1)\n\n        const industries = Datanauts.getIndustriesByCountry(idCountry)\n        industries.sort((a, b) => {\n            return a.name === 'unknowed' ? 1 : b.members - a.members\n        })\n\n        this.setState({\n            dataChart: CitiesDataChart.getChartData(cities, this.maxElements),\n            chartMode: 'city',\n            details: this.createDetailArea(cities, this.onClickButtonMembers, 'city'),\n            chartFooter: 'Datanauts in ' + this.chartCountries.filter(c => c.id === idCountry)[0].name,\n            industries: this.createIndustryArea(industries)\n        })\n    }\n\n    createDetailArea(arr, clickMembers, mode) {\n        let memberCount = 0;\n        const columns = arr.map(c => {\n            memberCount += c.members\n            return (\n                <Col sm={6} md={6} lg={4}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control\" aria-describedby=\"basic-addon2\"\n                            disabled={true}\n                            value={c.name}\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => { clickMembers(mode, c.id) }}>\n                                {c.members}\n                            </button>\n                        </div>\n                    </div>\n                </Col>\n            )\n        })\n        const footer = (\n            <div style={{ textAlign: 'center' }}><p><span className='small'>Total: {memberCount}</span></p></div>\n        )\n        return (\n            <div>\n                <h4 style={{ textAlign: 'center' }}>{mode === 'country' ? 'Countries' : 'Cities'}</h4>\n                <Row>\n                    {columns}\n                </Row>\n                {footer}\n            </div>\n        )\n    }\n\n    createIndustryArea(arr) {\n        const condensed = arr.slice(0, 9)\n        if (arr.length > 9) {\n            condensed.push({\n                name: 'others', members: arr.slice(9).reduce((accumulator, currentValue) => {\n                    return accumulator + currentValue.members\n                }, 0)\n            })\n        }\n\n        const columns = condensed.map(c => {\n            return (\n                <Col xs={12}>\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control warning\" aria-describedby=\"basic-addon2\" style={{ backgroundColor: 'rgba(255, 206, 86, 0.2)' }}\n                            disabled={true}\n                            value={c.name}\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-outline-secondary\" type=\"button\">\n                                {c.members}\n                            </button>\n                        </div>\n                    </div>\n                </Col>\n            )\n        })\n        return (\n            <div>\n                <h4 style={{ textAlign: 'center' }}>Industries</h4>\n                <Row>\n                    {columns}\n                </Row>\n            </div>\n        )\n    }\n\n    onClickButtonMembers = (mode, id) => {\n        if (mode === 'country') {\n            const d = Datanauts.getMembersByCountry(id)\n            const industries = Datanauts.getIndustriesByCountry(id)\n            industries.sort((a, b) => {\n                return a.name === 'unknowed' ? 1 : b.members - a.members\n            })\n\n\n            const details = (\n                <div>\n                    <h2>{d.country.name}</h2>\n                    <h4>members: {d.country.members}</h4>\n                    <p><i>Confidential Information</i></p>\n                    <Button onClick={() => { this.setCountryData() }}>Back</Button>\n                </div>\n            )\n            this.setState({\n                details,\n                industries: this.createIndustryArea(industries)\n            })\n        } else {\n            const d = Datanauts.getMembersByCity(id)\n            const details = (\n                <div>\n                    <h2>{d.city.name}</h2>\n                    <h4>members: {d.city.members}</h4>\n                    <p><i>Confidential Information</i></p>\n                    <Button onClick={() => { this.setCityData(d.city.idCountry) }}>Back</Button>\n                </div>\n            )\n            this.setState({\n                details,\n                industries: null\n            })\n        }\n    }\n\n    handleClick(e, k) {\n        if (this.state.chartMode === 'country') {\n            if (!k[0]) return\n            const idElement = parseInt(k[0]._index)\n            const country = this.chartCountries[idElement]\n            if (country)\n                this.setCityData(country.id)\n        } else {\n            this.setCountryData()\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <header>\n                    <h1>Searchnauts</h1>\n                </header>\n                {this.state.dataChart &&\n                    <div>\n                        <div>\n                            <Bar\n                                data={this.state.dataChart}\n                                width={100}\n                                height={400}\n                                options={{\n                                    maintainAspectRatio: false,\n                                    events: ['click'],\n                                    onClick: (e, k) => { this.handleClick(e, k) },\n                                    scales: {\n                                        xAxes: [{\n                                            barPercentage: 0.5,\n                                            minBarLength: 2,\n                                            gridLines: {\n                                                offsetGridLines: true\n                                            }\n                                        }],\n                                        yAxes: [{\n                                            ticks: {\n                                                beginAtZero: true\n                                            }\n                                        }]\n                                    }\n                                }}\n\n                            />\n                        </div>\n                        <div style={{ textAlign: 'center' }}><p><span className='small'>{this.state.chartFooter}</span></p></div>\n                        <Row>\n                            <Col md={8}>\n                                {this.state.details}\n                            </Col>\n                            <Col md={4}>\n                                {this.state.industries}\n                            </Col>\n                        </Row>\n                    </div>}\n                <footer style={{ textAlign: 'center' }}>\n                </footer>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}